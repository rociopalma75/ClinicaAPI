// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AgregarUnaNuevaEvolucionConDiagnosticoPrevioFeature : object, Xunit.IClassFixture<AgregarUnaNuevaEvolucionConDiagnosticoPrevioFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EvolucionTextoSimple.feature"
#line hidden
        
        public AgregarUnaNuevaEvolucionConDiagnosticoPrevioFeature(AgregarUnaNuevaEvolucionConDiagnosticoPrevioFeature.FixtureData fixtureData, Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Agregar una nueva evolucion con diagnostico previo", "Para que se pueda diagnosticar al paciente\r\nel medico\r\nquiere añadir una nueva ev" +
                    "olucion en la historia clinica del paciente eligiendo un diagnostico previo.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
 testRunner.Given("el medico \"Dr Rocio Palma\" ha iniciado sesion.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Descripcion"});
            table2.AddRow(new string[] {
                        "1",
                        "Angina"});
            table2.AddRow(new string[] {
                        "2",
                        "Dengue"});
            table2.AddRow(new string[] {
                        "3",
                        "Covid"});
#line 9
 testRunner.And("ha buscado la historia clinica del paciente \"44105560\" que posee los siguientes d" +
                    "iagnosticos", ((string)(null)), table2, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="El medico agrega una evolucion con texto libre")]
        [Xunit.TraitAttribute("FeatureTitle", "Agregar una nueva evolucion con diagnostico previo")]
        [Xunit.TraitAttribute("Description", "El medico agrega una evolucion con texto libre")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public void ElMedicoAgregaUnaEvolucionConTextoLibre()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("El medico agrega una evolucion con texto libre", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 17
 testRunner.Given("el doctor escribe para el paciente previamente buscado un informe sobre el diagno" +
                        "stico \"Angina\" que dice \"El paciente presenta los sintomas de una angina\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.When("el medico guarda la evolucion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("se registra la evolucion en la historia clinica del paciente con el diagnostico, " +
                        "la descripcion y el medico.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AgregarUnaNuevaEvolucionConDiagnosticoPrevioFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AgregarUnaNuevaEvolucionConDiagnosticoPrevioFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
